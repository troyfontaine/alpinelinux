#!/usr/bin/env bash

build() {
    build_amd64
    build_arm
    build_arm_release
}

build_amd64() {
    cp resources/shadow ./arch/x86_64/
	declare build_files="${*:-arch/x86_64/**/options}"

	for file in $build_files; do
        ( # shellcheck source=arch/x86_64/stock-VV/options
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${RELEASE:?}" "${DOWNLOAD:?}"

		for tag in "${TAGS[@]}"; do
            mytags="-t $tag $mytags"
		done

        echo "Release: $RELEASE"
        echo "Download URL: $DOWNLOAD"

        curl -o ./arch/x86_64/alpine.tgz $DOWNLOAD

		docker build $mytags \
		--build-arg ALPINE_VERSION=${RELEASE} \
		--build-arg VCS_REF=`git rev-parse --short HEAD` \
		--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
		--build-arg VERSION=`date -u +"%Y.%m.%d.%H:%MZ"` arch/x86_64/
        rm ./arch/x86_64/alpine.tgz
        )
	done
    rm ./arch/x86_64/shadow
}

build_arm() {
    cp resources/shadow ./arch/armhf/
    cp -r ./qemu ./arch/armhf/
	declare arm_build_files="${*:-arch/armhf/**/options}"

	for file in $arm_build_files; do
        ( # shellcheck source=arch/armhf/stock-VV/options
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${RELEASE:?}" "${DOWNLOAD:?}"

		for tag in "${TAGS[@]}"; do
            mytags="-t $tag $mytags"
		done

        echo "Release: $RELEASE"
        echo "Download URL: $DOWNLOAD"

        curl -o ./arch/armhf/alpine.tgz $DOWNLOAD

		docker build $mytags \
		--build-arg ALPINE_VERSION=${RELEASE} \
        --build-arg ALPINE_DOWNLOAD=${DOWNLOAD} \
		--build-arg VCS_REF=`git rev-parse --short HEAD` \
		--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
		--build-arg VERSION=`date -u +"%Y.%m.%d.%H:%MZ"` arch/armhf/
        rm ./arch/armhf/alpine.tgz
        )
	done
    rm -rf ./arch/armhf/qemu
    rm ./arch/armhf/shadow
}

build_arm_release() {
    cp resources/shadow ./arch/armhf_release/
    cp -r ./qemu ./arch/armhf_release/
	declare arm_build_files="${*:-arch/armhf_release/**/options}"

	for file in $arm_build_files; do
        ( # shellcheck source=armhf_release/stock-VV/options
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${RELEASE:?}" "${DOWNLOAD:?}"

		for tag in "${TAGS[@]}"; do
            mytags="-t $tag $mytags"
		done
        echo "Release: $RELEASE"
        echo "Download URL: $DOWNLOAD"

        curl -o ./arch/armhf_release/alpine.tgz $DOWNLOAD

		docker build $mytags \
		--build-arg ALPINE_VERSION=${RELEASE} \
        --build-arg ALPINE_DOWNLOAD=${DOWNLOAD} \
		--build-arg VCS_REF=`git rev-parse --short HEAD` \
		--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
		--build-arg VERSION=`date -u +"%Y.%m.%d.%H:%MZ"` arch/armhf_release/
        rm ./arch/armhf_release/alpine.tgz
        )
	done
    rm -rf ./arch/armhf_release/qemu
    rm ./arch/armhf_release/shadow
}

run_tests() {
    x86_64_tests
    armhf_tests
}

x86_64_tests() {
	declare build_files="${*:-arch/x86_64/**/options}"
	declare -a test_files
	for file in $build_files; do
		# shellcheck source=arch/x86_64/stock-XX/options
		source "$file"
		local tag
		tag="${TAGS[0]}" tag="${tag//:/-}" tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

armhf_tests() {
	declare build_files="${*:-arch/armhf/**/options}"
	declare -a test_files
	for file in $build_files; do
		# shellcheck source=arch/armhf/stock-XX/options
		source "$file"
		local tag
		tag="${TAGS[0]}" tag="${tag//:/-}" tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	declare cmd="$1"
	case "$cmd" in
		test)	shift;	run_tests "$@";;
        test_amd64) shift; x86_64_tests "$@";;
        test_arm)   shift; armhf_tests "$@";;
        build_arm)  build_arm;;
        build_amd64)   build_amd64;;
		*)		build "$@";;
	esac
}

main "$@"
